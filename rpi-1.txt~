    +---------+
   /         /|  A satellite to be deployed
  /         / |  in a vertical takeoff drone
  +--------+  |  that flies up to 3KM
  |        |  |  
  | RPS-1  |  +  Modules: camera, gps, solar
  |        | /   array.
  |        |/ 
  +--------+     Software: raspbian, cFS

# todo

  * compile kernel rt in fedora 
  * compile kernel rt in rpi3
  * radiation effect - constantly reboot the board, memory scrubing
  * shake and bake
  * http://www.frank-durr.de/?p=203
  * https://cfs.gsfc.nasa.gov
  * apt-get install lm_sensors virt-manager
  * solar panel
  * cubesat frame 3d print
  * kband research
  * what is going to be plugged in rpi3?
  * what instruments to have for 3km flights? camera
  * buy rpi zero, with complete kit and compatible wifi dongle
  * OK: install raspbian and enable wifi
  * OK: try to use powertop in rpi3s-1
  * OK: https://www.raspberrypi.org/documentation/installation/installing-images/linux.m
  * OK: sd card michael
  * 24hz logic analyzer

# drone and ballon deployment

A drone which only job is to go up. How far up a drone can go? 3.4km

  * calculate how much power the drone needs to lift the payload
  * can I install solar arrays to extend flight or is it just a short flight?
  * RTT for geostationary orbit is 239ms

# Raspberry pi power consumption

  2.5A - Recommended PSU current capacity (powering 4 usbs)
  1.2A - Maximum total USB peripheral current draw  
~400mA - Typical bare-board active current consumption
 250mA - Camera module drawn

  ==  Power drawn in amps ==

                 Pi3    Pi0
  Boot   - Max - 0.75 | 0.20
           Avg - 0.35 | 0.15
  Idle   - Avg - 0.30 | 0.10
  Stress - Max - 1.34 | 0.35
           Avg - 0.85 | 0.23

run-time enviroment
layered software
component based design

OS Abstraction Layer (OSAL)
Platform Support Package (PSP) layer 
core Flight Executive (cFE) layer
Application layer containing a set of re-usable libraries and applications

software bus
time services
executive services
event services
table services
           
== core Flight System (cFS) - Overview ==

The core Flight System (cFS) is a platform and project independent reusable
software framework and set of reusable software applications.  There are three
key aspects to the cFS architecture: a dynamic run-time environment, layered
software, and a component based design.  It is the combination of these key
aspects that makes it suitable for reuse on any number of NASA flight projects
and/or embedded software systems at a significant cost savings.

The cFS flight software framework takes advantage of a rich heritage of
successful Goddard Space Flight Center flight software efforts and addresses
the challenges of rapidly increasing software development costs and schedules
due to the constant changes and advancements in hardware.  Flight software
size and complexity is expected to grow dramatically in coming years and the
cFS provides a means to manage the growth and partition complexity.  To
support reuse and project independence, the architecture contains a
configurable set of requirements and code.  The configurable parameters allow
the cFS to be tailored for each environment including desk-top and closed loop
simulation environments.  The ability to run and test software applications on
a developer's desktop and then deploy that same software without changes to
the embedded system is now possible using the cFS.  Science and mission
software can be developed and functionally tested very early in the project
and well before any project hardware is even available.  The architecture
contains a tool suite which includes a reusable test suite.  In addition, the
architecture contains reusable artifacts including requirements, design
documentation, test procedures and results, development standards, and user
guides.   The cFS architecture simplifies the flight software development
process by providing the underlying infrastructure and hosting a runtime
environment for development of project/mission specific applications.  The cFS
architecture also simplifies the flight software maintenance process by
providing the ability to change software components during development or in
flight without having to restart or reboot the system.  The cFS architecture
has been proven to:

  * Reduce time to deploy high quality flight software
  * Reduce project schedule and cost uncertainty
  * Facilitate formalized software reuse
  * Enable collaboration across organizations
  * Simplify flight software sustaining engineering
  * Provide a platform for advanced concepts and prototyping
  * Provide common standards and tools across Goddard's missions and NASA wide
