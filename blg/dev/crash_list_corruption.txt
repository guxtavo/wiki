In the Kernel address space layout, ffff is where kernel memory starts, AKA PAGE_OFFSET. In RHEL6, for example, page offset is defined at:

arch/x86/include/asm/page_types.h:
  #define PAGE_OFFSET             ((unsigned long)__PAGE_OFFSET)

arch/x86/include/asm/page_64_types.h:
  #define __PAGE_OFFSET           _AC(0xffff880000000000, UL)

  #define __PHYSICAL_START        ((CONFIG_PHYSICAL_START +               \
                                  (CONFIG_PHYSICAL_ALIGN - 1)) &        \
                                 ~(CONFIG_PHYSICAL_ALIGN - 1))

  #define __START_KERNEL          (__START_KERNEL_map + __PHYSICAL_START)
  #define __START_KERNEL_map      _AC(0xffffffff80000000, UL)

The kernel virtual address ("0xfeff8101114940d8") is non-canonical. In other words, not valid. As previously explained, this value is typically indicative of a hardware or software related issue, i.e. bit 56 is not set when it should be.

Here is the list of third party modules loaded:

crash> mod -t | grep -v " 0$"
NAME                   LICENSE_GPLOK
vmxnet3                40(U)
pvscsi                 40(U)
vmxnet                 40(U)
vmmemctl               40(U)
vmci                   40(U)
vsock                  40(U)
snapapi26              41(U)

If you can isolate the problem to a given hypervisor in your datacenter, please engage your hardware vendor.

To speed up your investigation, I recommend you to share the vmcore and the exchange in this ticket with your third party modules vendors.

Without a pattern we probably won't be able to pinpoint where is the problem. After excluding hardware and third party code problems, in case you still hit this issue, please try to describe in high level how to reproduce the issue, e.g., list corruption always happens after "vmotion". 

The Kernel team always recommends our customers to consider running the latest kernel, but we understand some customers have constraints regarding this.



Hi, I just want to correct a statement:

# As my colleague Vern could explain, the kernel would not write a kernel space address in a list pointing to a zone outside (feff) the kernel address space.

What I meant is, the kernel virtual address ("0xfeff8101114940d8") is non-canonical. In other words, not valid. As previously explained, this value is typically indicative of a hardware or software related issue, i.e. bit 56 is not set when it should be.






We have been looking at the dump that was submitted. This crash occurred because of a bit being off in a kernel address.

crash> log | grep list -i
Built 1 zonelists.  Total pages: 6200217
#
list_del corruption. prev->next should be ffff8101114940d8, but was feff8101114940d8 <== eval this
#                                         ^^^^^^^^^^^^^^^^    
Kernel BUG at lib/list_debug.c:65
RIP: 0010:[<ffffffff80157b76>]  [<ffffffff80157b76>] list_del+0x21/0x71
 [<ffffffff800cc96d>] shrink_active_list+0x127/0x4c4
RIP  [<ffffffff80157b76>] list_del+0x21/0x71

crash> eval -b 0xfeff8101114940d8
hexadecimal: feff8101114940d8  
    decimal: 18374546846279876824  (-72197227429674792)
      octal: 1773774020042122240330
     binary: 1111111011111111100000010000000100010001010010010100000011011000
   bits set: 63 62 61 60 59 58 57 55 54 53 52 51 50 49 48 47 40 32 28 24 22 19 
             16 14 7 6 4 3 

crash> rd ffff8101114940d8 2
ffff8101114940d8:  ffff81000002bf88 ffff810109f8a388   ................
crash> rd ffff810109f8a388
ffff810109f8a388:  feff8101114940d8                    .@I.....
                    ^- should be an f

So we have a bit off that should be on.





Q1: Has there been any other issues with this system?
Q2: Has there been any other issues on other VM's on the host this system was on when it crashed?
Q3: Do you migrate the system around between different host?
Q4: Can You reproduce the issue?
