[Performance] All you want to know about scaling drivers, governors, cstates,
pstates and power management

In this article, I will explain the hands-on and theory behind contemporary
CPU power management on x86 systems. I will explore the use of the cpupower
utility, which is shipped in RHEL 6* and 7.

Modern CPUs together with ACPI (Advanced Configuration and Power Interface)
provide different power states which can improve your energy savings or
boost performance some orders of magnitude. 

There are three different power states in contemporary CPUS:

  * C-states (also known as idle or sleep states)
  * P-states (also known as operational states)
  * T-states (Heat output or "thermal states") 

I will be focusing mainly on the fisrt two, as T-states is not so well
adopted.

 === C-states ===

CPUs with the x86 architecture support various states in which parts of the CPU 
are deactivated or run at lower performance settings. 

shotwell ~/Downloads/c-state.jpg

These states, known as
C-states, allow systems to save power by partially deactivating CPUs that are
not in use. C-states are numbered from C0 upwards, with higher numbers
representing decreased CPU functionality and greater power saving.

A CPU running on the lowest sleep state possible consumes the least
amount of watts, but it also takes considerably more time to wake it up from
that state when needed. In very rare cases this can lead to the CPU having to
wake up immediately every time it just went to sleep. This situation results
in an *effectively permanently busy CPU* and loses some of the potential power
saving if another state had been used. 

Enter cpupower

~/Pictures/cpupower.png



  1) BIOS "Disable C-States" option

On some Intel-based x86 systems, the "Disable C-States" BIOS option removes
ACPI c-state information from the dynamically generated ACPI tables in BIOS.
This has the effect of disabling the ACPI idle driver (also known as the
processor_idle driver).

2) The 'intel_idle.max_cstate=0' kernel parameter

This option disables the intel_idle driver, which controls c-state transitions
on Intel based platforms. If ACPI c-state information is available, the
acpi_idle ddiver will then be used to control c-state transitions.

3) The "processor.max_cstate=0" kernel parameter

This kernel parameter disables the ACPI idle driver (the processor_idle driver). It should be used on AMD systems to disable the processor_idle driver, and on Intel systems without the BIOS "Disable c-states" option to disable the processor_idle driver.

4) The "cpuidle.off=1" kernel parameter

This parameter disables both the intel_idle driver and the processor_idle driver, and any other cpu_idle drivers that are available.

5) cpupower idle-set -d 0

 === P-states ===

One of the most effective ways to reduce power consumption and heat output on your system is to use play with P-states. CPUfreq — also referred to as CPU speed scaling — allows the clock speed of the processor to be adjusted on the fly. This enables the system to run at a reduced clock speed to save power. The rules for shifting frequencies, whether to a faster or slower clock speed, and when to shift frequencies, are defined by the CPUfreq governor.

The governor defines the power characteristics of the system CPU, which in turn affects CPU performance. Each governor has its own unique behavior, purpose, and suitability in terms of workload. This section describes how to choose and configure a CPUfreq governor, the characteristics of each governor, and what kind of workload each governor is suitable for. 

Certain modern servers contain BIOS functionality to set a P-State limit. This works by modifying the maximum allowed cpuspeed frequency through an ACPI event to the OS. 

This parameter disables both the intel_idle driver and the processor_idle driver, and any other cpu_idle drivers that are available.

5) cpupower idle-set -d 0

 === P-states ===

One of the most effective ways to reduce power consumption and heat output on your system is to use play with P-states. CPUfreq — also referred to as CPU speed scaling — allows the clock speed of the processor to be adjusted on the fly. This enables the system to run at a reduced clock speed to save power. The rules for shifting frequencies, whether to a faster or slower clock speed, and when to shift frequencies, are defined by the CPUfreq governor.

The governor defines the power characteristics of the system CPU, which in turn affects CPU performance. Each governor has its own unique behavior, purpose, and suitability in terms of workload. This section describes how to choose and configure a CPUfreq governor, the characteristics of each governor, and what kind of workload each governor is suitable for. 

Certain modern servers contain BIOS functionality to set a P-State limit. This works by modifying the maximum allowed cpuspeed frequency through an ACPI event to the OS. 

P-states have become known as SpeedStep in Intel processors, as PowerNow! or Cool'n'Quiet in AMD processors, and as PowerSaver in VIA processors.

How to change governors:

  # cpupower frequency-set -g <governor>

How to manage minimum and maximum P-state frequency

  # cpupower frequency-set -d <minimum_frequency> -u <maximum_frequency>

How to display P-state governors

[rhel67]# cpupower frequency-info
analyzing CPU 0:
  driver: acpi-cpufreq <======= scaling driver
  CPUs which run at the same hardware frequency: 0
  CPUs which need to have their frequency coordinated by software: 0
  maximum transition latency: 10.0 us
  hardware limits: 1.20 GHz - 2.40 GHz  <======= CPU frequency range limits
  available frequency steps:  2.40 GHz, 2.30 GHz, 2.20 GHz, 2.10 GHz, 2.00 GHz, 1.90 GHz, 1.80 GHz, 1.70 GHz, 1.60 GHz, 1.50 GHz, 1.40 GHz, 1.30 GHz, 1.20 GHz  <======= CPU frequency range limits
  available cpufreq governors: ondemand userspace performance  <======= available governors
  current policy: frequency should be within 1.20 GHz and 2.40 GHz.
                  The governor "ondemand" may decide which speed to use
                  within this range.
  current CPU frequency: 1.20 GHz (asserted by call to hardware)
  boost state support:
    Supported: no
    Active: no
    2400 MHz max turbo 4 active cores
    2400 MHz max turbo 3 active cores
    2400 MHz max turbo 2 active cores
    2400 MHz max turbo 1 active cores

[rhel72]# cpupower frequency-info
analyzing CPU 0:
  driver: intel_pstate <======= scaling driver
  CPUs which run at the same hardware frequency: 0
  CPUs which need to have their frequency coordinated by software: 0
  maximum transition latency: 0.97 ms.
  hardware limits: 1.20 GHz - 2.60 GHz  <======= CPU frequency range limits
  available cpufreq governors: performance, powersave  <======= available governors
  current policy: frequency should be within 1.20 GHz and 2.60 GHz.
                  The governor "performance" may decide which speed to use
                  within this range.
  current CPU frequency is 2.20 GHz (asserted by call to hardware).
  boost state support:
    Supported: yes
    Active: yes
    2400 MHz max turbo 4 active cores
    2400 MHz max turbo 3 active cores
    2500 MHz max turbo 2 active cores
    2600 MHz max turbo 1 active cores

RHEL6 and RHEL7 use different default scaling drivers. RHEL6 default scaling driver is acpi_cpufreq, whereas RHEL7 uses the new intel_pstate.

Here is a list of the available governors for each of the scaling drivers:

-------------------------------------------------
.                |
As you probably already guessed, the normal run state of the processor was T0. When the processor entered a higher T-state, the manager would clock gate the cores to slowdown execution and allow the processor to “relax” and cool. For example, in T1 the HW power manager might clock gate 12% of the cycles. In rough terms, this means that the core will run for 78% of the time and sleep for the rest. T2 might clock gate 25% of the cycles, etc. In the very highest T-state, over 90% of the cycles might be clock gated. (See the figure below.)

throttling control:
Throttling is sort of enforced power management: Even when the system is highly active, the CPU is "put to sleep" for short amounts of time. This is done when the temperature is critically high, or, by request of the user, when the system shall use less power to allow longer system usage when on battery power.

 === todo ===


Install 6.7 on https://beaker.engineering.redhat.com/view/cisco-c240m3s-1.gsslab.pnq.redhat.com#loan

and check which scaling driver is used. It should be intel_pstate


The native CPU module is loaded automatically.

The pstate power scaling driver is used automatically for modern Intel CPUs instead of the other drivers below. This driver takes priority over other drivers and is built-in as opposed to being a module. This driver is currently automatically used for Sandy Bridge and newer CPUs. If you encounter a problem while using this driver, add intel_pstate=disable to your kernel line. You can use the same user space utilities with this driver, but cannot control it.

https://wiki.archlinux.org/index.php/CPU_frequency_scaling
http://acpi.sourceforge.net/documentation/processor.html

how to change scaling driver on rhel67 to intel_pstate? 

https://bugzilla.redhat.com/show_bug.cgi?id=1231280

rmmod acpi_cpufreq; modprobe intel_pstate

In the upstream kernel, intel_pstate is a built-in.  In RHEL6 (since the
default x86 cpu frequency driver is acpi-cpufreq) we have had to make it
a module so that it can be loaded during runtime

To change scaling driver in rhel67:



[root@cisco-c220m3-1 ~]# ls /lib/modules/2.6.32-573.el6.x86_64/kernel/arch/x86/kernel/cpu/cpufreq/
acpi-cpufreq.ko  intel_pstate.ko  mperf.ko  p4-clockmod.ko  pcc-cpufreq.ko  powernow-k8.ko  speedstep-lib.ko

[root@cisco-c220m3-1 ~]# cat /proc/acpi/processor/CPU0/info 
processor id:            0
acpi id:                 0
bus mastering control:   yes
power management:        no
throttling control:      yes
limit interface:         yes

[root@cisco-c220m3-1 ~]# cat /proc/acpi/processor/CPU0/limit 
active limit:            P0:T0
user limit:              P0:T0
thermal limit:           P0:T0

[root@cisco-c220m3-1 ~]# cat /proc/acpi/processor/CPU0/throttling
state count:             15
active state:            T0
state available: T0 to T14
states:
   *T0:                  100%
    T1:                  94%
    T2:                  88%
    T3:                  82%
    T4:                  75%
    T5:                  69%
    T6:                  63%
    T7:                  57%
    T8:                  50%
    T9:                  44%
    T10:                  38%
    T11:                  32%
    T12:                  25%
    T13:                  19%
    T14:                  13%
